generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String          @unique
  emailVerified          DateTime?
  image                  String?
  credits                Int             @default(5)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  level                  String?
  stripeCurrentPeriodEnd DateTime?
  stripeCustomerId       String?
  stripePriceId          String?
  stripeSubscriptionId   String?
  accounts               Account[]
  Authenticator          Authenticator[]
  sessions               Session[]
  Story                  Story[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Story {
  id        Int      @id @default(autoincrement())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String
  isPublic  Boolean  @default(false)
  likes     Int      @default(0)
  storyId   String?  @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GenerationQueue {
  id          String   
  userId      String
  pollingId   String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String
  type        String

  @@index([userId, status])
  @@index([pollingId, status])
  @@index([type, status])
}
